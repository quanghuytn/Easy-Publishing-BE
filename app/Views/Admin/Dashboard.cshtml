
<div class="panel-header bg-primary-gradient">
	<div class="page-inner py-5">
		<div class="d-flex align-items-left align-items-md-center flex-column flex-md-row">
			<div>
				<h2 class="text-white pb-2 fw-bold">Dashboard</h2>
			</div>
		</div>
	</div>
</div>
<div class="page-inner mt--5">
	<div class="row row-card-no-pd mt--2">
		<div class="col-sm-6 col-md-4">
			<div class="card card-stats card-round">
				<div class="card-body ">
					<div class="row">
						<div class="col-5">
							<div class="icon-big text-center">
								<i class="flaticon-chart-pie text-warning"></i>
							</div>
						</div>
						<div class="col-7 col-stats">
							<div class="numbers">
								<p class="card-category">Số lượng truyện</p>
								<h4 class="card-title" id="numberOfStories">20</h4>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="col-sm-6 col-md-4">
			<div class="card card-stats card-round">
				<div class="card-body ">
					<div class="row">
						<div class="col-4">
							<div class="icon-big text-center">
								<i class="flaticon-coins text-success"></i>
							</div>
						</div>
						<div class="col-8 col-stats">
							<div class="numbers">
								<p class="card-category">Doanh thu tổng</p>
								<h4 class="card-title" id="overallRevenue">0 ₫</h4>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="col-sm-6 col-md-4">
			<div class="card card-stats card-round">
				<div class="card-body">
					<div class="row">
						<div class="col-5">
							<div class="icon-big text-center">
								<i class="flaticon-user-5 text-primary"></i>
							</div>
						</div>
						<div class="col-7 col-stats">
							<div class="numbers">
								<p class="card-category">Số lượng tác giả</p>
								<h4 class="card-title" id="numberOfAuthor">23</h4>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col-md-8">
			<div class="card">
				<div class="card-header">
					<div class="card-head-row">
						<div class="card-title">Doanh thu 7 ngày qua</div>
						<div class="card-tools">
							<a href="#" class="btn btn-info btn-border btn-round btn-sm mr-2">
								<span class="btn-label">
									<i class="fa fa-pencil"></i>
								</span>
								Export
							</a>
							<a href="#" class="btn btn-info btn-border btn-round btn-sm">
								<span class="btn-label">
									<i class="fa fa-print"></i>
								</span>
								Print
							</a>
						</div>
					</div>
				</div>
				<div class="card-body">
					<div class="chart-container" style="min-height: 375px">
						<canvas id="statisticsChart"></canvas>
					</div>
					<div id="myChartLegend"></div>
				</div>
			</div>
		</div>
		<div class="col-md-4">
			<div class="card card-primary">
				<div class="card-header">
					<div class="card-title">Doanh thu hôm nay</div>
				</div>
				<div class="card-body pb-0">
					<div class="mb-4 mt-2">
						<h1 id="todaySale">0 ₫</h1>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col-md-4">
			<div class="card">
				<div class="card-header">
					<div class="card-title">Top Stories</div>
				</div>
				<div class="card-body pb-0" id="topStoriesList">
					
				</div>
			</div>
		</div>
		<div class="col-md-4">
			<div class="card">
				<div class="card-body">
					<div class="card-title fw-mediumbold">Top Authors</div>
					<div class="card-list" id="authorList">
						
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		$('#nav-menu li').removeClass("active");
		$('#nav-dashboard').addClass("active");
		$('#lineChart').sparkline([102, 109, 120, 99, 110, 105, 115], {
			type: 'line',
			height: '70',
			width: '100%',
			lineWidth: '2',
			lineColor: '#177dff',
			fillColor: 'rgba(23, 125, 255, 0.14)'
		});

		$('#lineChart2').sparkline([99, 125, 122, 105, 110, 124, 115], {
			type: 'line',
			height: '70',
			width: '100%',
			lineWidth: '2',
			lineColor: '#f3545d',
			fillColor: 'rgba(243, 84, 93, .14)'
		});

		$('#lineChart3').sparkline([105, 103, 123, 100, 95, 105, 115], {
			type: 'line',
			height: '70',
			width: '100%',
			lineWidth: '2',
			lineColor: '#ffa534',
			fillColor: 'rgba(255, 165, 52, .14)'
		});
		loadData();

	});
	
	async function loadData() {
		//revenue in 7 days
		fetch('http://localhost:5188/api/v1/transaction/getRevenue')
			.then(response => response.json())
			.then(data => {
				createWeekRevenueChart(data.dt.labels, data.dt.data)
			})
			.catch(error => {
				console.error('Error fetching data:', error);
			});
		// today revenu
		fetch('http://localhost:5188/api/v1/transaction/getTodayRevenue')
			.then(response => response.json())
			.then(data => {
				const todaySale = data.dt; // Get the last item in the data array
				document.getElementById('todaySale').textContent = `${todaySale.toLocaleString('vi-VN')} ₫`;
			})
			.catch(error => {
				console.error('Error fetching data:', error);
			});

		// overallRevenue
		fetch('http://localhost:5188/api/v1/transaction/getOverallRevenue')
			.then(response => response.json())
			.then(data => {
				const overallRevenue = data.dt; 
				document.getElementById('overallRevenue').textContent = `${overallRevenue.toLocaleString('vi-VN')} ₫`;
			})
			.catch(error => {
				console.error('Error fetching data:', error);
			});

		//number of stories and authors
		fetch('http://localhost:5188/api/v1/story/getAuthorAndStoryNumber')
			.then(response => response.json())
			.then(data => {
				document.getElementById('numberOfAuthor').textContent = data.dt.authorNumber;
				document.getElementById('numberOfStories').textContent = data.dt.storyNumber;
			})
			.catch(error => {
				console.error('Error fetching data:', error);
			});

		// fetch top stories according to revenue
		fetch('http://localhost:5188/api/v1/shelves/top6_sale')
			.then(response => response.json())
			.then(data => {
				const topStoriesList = document.getElementById('topStoriesList');

				// Clear any existing content
				topStoriesList.innerHTML = '';

				// Populate the card with top stories data
				data.dt.forEach(data => {
					const item = `
						<div class="d-flex">
							<div class="avatar">
											<img src="../Assets/images/story/${data.story.storyImage}" alt="..." class="avatar-img img-thumbnail">
							</div>
							<div class="flex-1 pt-1 ml-2">
										<h6 class="fw-bold mb-1">${data.story.storyTitle}</h6>
										<small class="text-muted">${data.story.authorName}</small>
							</div>
							<div class="d-flex ml-auto align-items-center">
										<h3 class="text-info fw-bold">+${data.revenue} ₫</h3>
							</div>
						</div>
						<div class="separator-dashed"></div>
					`;
					topStoriesList.innerHTML += item;
				});
			})
			.catch(error => {
				console.error('Error fetching top stories:', error);
			});

		// top 6 author according to revenue
		fetch('http://localhost:5188/api/v1/shelves/top6_authorRevenue')
			.then(response => response.json())
			.then(data => {
				const authorList = document.getElementById('authorList');

				// Clear any existing content
				authorList.innerHTML = '';

				// Populate the card with author data
				data.dt.forEach(data => {

					const item = `
						<div class="item-list">
							<div class="avatar">
												<img src="../Assets/images/avatar/${data.author.authorImage}" alt="Author Image" class="avatar-img rounded-circle"
													onerror="this.onerror=null;this.src='../Assets/img/user-default.png';">
							</div>
							<div class="info-user ml-3">
									<div class="username">${data.author.authorFullname}</div>
										<div class="status">${data.author.authorEmail}</div>
							</div>
						</div>
					`;
					authorList.innerHTML += item;
				});
			})
			.catch(error => {
				console.error('Error fetching authors:', error);
			});
	};

	function createWeekRevenueChart(labels, data){
		var ctx = document.getElementById('statisticsChart').getContext('2d');

		var statisticsChart = new Chart(ctx, {
			type: 'line',
			data: {
				labels: labels,
				datasets: [{
					label: "Doanh thu",
					borderColor: '#f3545d',
					pointBackgroundColor: 'rgba(243, 84, 93, 0.6)',
					pointRadius: 0,
					backgroundColor: 'rgba(243, 84, 93, 0.4)',
					legendColor: '#f3545d',
					fill: true,
					borderWidth: 2,
					data: data
				}]
			},
			options: {
				responsive: true,
				maintainAspectRatio: false,
				legend: {
					display: false
				},
				tooltips: {
					bodySpacing: 4,
					mode: "nearest",
					intersect: 0,
					position: "nearest",
					xPadding: 10,
					yPadding: 10,
					caretPadding: 10,
					callbacks: {
						label: function (tooltipItem, data) {
							var label = data.datasets[tooltipItem.datasetIndex].label || '';
							var value = tooltipItem.yLabel;
							return label + ": " + value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + " ₫"; // Format with commas and append "VND"
						}
					}
				},
				layout: {
					padding: { left: 5, right: 5, top: 15, bottom: 15 }
				},
				scales: {
					yAxes: [{
						ticks: {
							fontStyle: "500",
							beginAtZero: false,
							maxTicksLimit: 7,
							padding: 10,
							callback: function (value, index, values) {
								return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + " ₫"; // Format with commas and append "VND"
							}
						},
						gridLines: {
							drawTicks: false,
							display: false
						}
					}],
					xAxes: [{
						gridLines: {
							zeroLineColor: "transparent"
						},
						ticks: {
							padding: 10,
							fontStyle: "500"
						}
					}]
				},
				legendCallback: function (chart) {
					var text = [];
					text.push('<ul class="' + chart.id + '-legend html-legend">');
					for (var i = 0; i < chart.data.datasets.length; i++) {
						text.push('<li><span style="background-color:' + chart.data.datasets[i].legendColor + '"></span>');
						if (chart.data.datasets[i].label) {
							text.push(chart.data.datasets[i].label);
						}
						text.push('</li>');
					}
					text.push('</ul>');
					return text.join('');
				}
			}
		});

		var myLegendContainer = document.getElementById("myChartLegend");

		// generate HTML legend
		myLegendContainer.innerHTML = statisticsChart.generateLegend();

		// bind onClick event to all LI-tags of the legend
		var legendItems = myLegendContainer.getElementsByTagName('li');
		for (var i = 0; i < legendItems.length; i += 1) {
			legendItems[i].addEventListener("click", legendClickCallback, false);
		}
	}
</script>